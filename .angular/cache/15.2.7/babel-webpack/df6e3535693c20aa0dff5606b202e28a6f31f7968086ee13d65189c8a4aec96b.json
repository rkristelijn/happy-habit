{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Component } from '@angular/core';\nlet AppComponent = class AppComponent {\n  constructor() {\n    this.title = 'happy-habit';\n    this.regenerate();\n  }\n  regenerate() {\n    const array = [];\n    // generate 65 random numbers between 0 and 16\n    for (let i = 0; i < 64; i++) {\n      const min = 0;\n      const max = 16;\n      array.push(Math.floor(Math.random() * (max - min + 1) + min));\n    }\n    const uniqueArray = [...new Set(array)];\n    // get only the first elements\n    this.uniqueArray = uniqueArray.splice(0, 16);\n    this.randomNumber = Math.floor(Math.random() * 16);\n  }\n};\nAppComponent = __decorate([Component({\n  selector: 'happy-habit2-root',\n  template: `\n    <div class=\"container\">\n      <div *ngFor=\"let i of [0, 1, 2, 3]\" class=\"row\">\n        <div *ngFor=\"let j of [0, 1, 2, 3]\" class=\"col-sm mt-4\">\n          <img *ngIf=\"i * 4 + j === randomNumber; else elseBlock\"\n          [src]=\"'assets/positive/' + uniqueArray[+i * 4 + +j] + '.jpeg'\"\n          class=\"img-fluid border border-success\" [alt]=\"'Responsive image' +\n          uniqueArray[+i * 4 + +j]\" (onClick)=\" />\n          <ng-template #elseBlock>\n            <img\n              [src]=\"'assets/negative/' + uniqueArray[+i * 4 + +j] + '.jpeg'\"\n              class=\"img-fluid\"\n              [alt]=\"'Responsive image' + uniqueArray[+i * 4 + +j]\"\n            />\n          </ng-template>\n        </div>\n      </div>\n    </div>\n  `\n}), __metadata(\"design:paramtypes\", [])], AppComponent);\nexport { AppComponent };","map":{"version":3,"names":["Component","AppComponent","constructor","title","regenerate","array","i","min","max","push","Math","floor","random","uniqueArray","Set","splice","randomNumber","__decorate","selector","template"],"sources":["/Users/nlrxk0145/github/happy-habit/src/app/app.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\n\n@Component({\n  selector: 'happy-habit2-root',\n  template: `\n    <div class=\"container\">\n      <div *ngFor=\"let i of [0, 1, 2, 3]\" class=\"row\">\n        <div *ngFor=\"let j of [0, 1, 2, 3]\" class=\"col-sm mt-4\">\n          <img *ngIf=\"i * 4 + j === randomNumber; else elseBlock\"\n          [src]=\"'assets/positive/' + uniqueArray[+i * 4 + +j] + '.jpeg'\"\n          class=\"img-fluid border border-success\" [alt]=\"'Responsive image' +\n          uniqueArray[+i * 4 + +j]\" (onClick)=\" />\n          <ng-template #elseBlock>\n            <img\n              [src]=\"'assets/negative/' + uniqueArray[+i * 4 + +j] + '.jpeg'\"\n              class=\"img-fluid\"\n              [alt]=\"'Responsive image' + uniqueArray[+i * 4 + +j]\"\n            />\n          </ng-template>\n        </div>\n      </div>\n    </div>\n  `,\n})\nexport class AppComponent {\n  title = 'happy-habit';\n  uniqueArray: number[];\n  randomNumber: number;\n\n  constructor() {\n    this.regenerate();\n  }\n\n  regenerate() {\n    const array = [];\n\n    // generate 65 random numbers between 0 and 16\n    for (let i = 0; i < 64; i++) {\n      const min = 0;\n      const max = 16;\n      array.push(Math.floor(Math.random() * (max - min + 1) + min));\n    }\n\n    const uniqueArray = [...new Set(array)];\n    // get only the first elements\n    this.uniqueArray = uniqueArray.splice(0, 16);\n\n    this.randomNumber = Math.floor(Math.random() * 16);\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAwBlC,IAAMC,YAAY,GAAlB,MAAMA,YAAY;EAKvBC,YAAA;IAJA,KAAAC,KAAK,GAAG,aAAa;IAKnB,IAAI,CAACC,UAAU,EAAE;EACnB;EAEAA,UAAUA,CAAA;IACR,MAAMC,KAAK,GAAG,EAAE;IAEhB;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;MAC3B,MAAMC,GAAG,GAAG,CAAC;MACb,MAAMC,GAAG,GAAG,EAAE;MACdH,KAAK,CAACI,IAAI,CAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,IAAIJ,GAAG,GAAGD,GAAG,GAAG,CAAC,CAAC,GAAGA,GAAG,CAAC,CAAC;;IAG/D,MAAMM,WAAW,GAAG,CAAC,GAAG,IAAIC,GAAG,CAACT,KAAK,CAAC,CAAC;IACvC;IACA,IAAI,CAACQ,WAAW,GAAGA,WAAW,CAACE,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC;IAE5C,IAAI,CAACC,YAAY,GAAGN,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,EAAE,CAAC;EACpD;CACD;AAzBYX,YAAY,GAAAgB,UAAA,EAtBxBjB,SAAS,CAAC;EACTkB,QAAQ,EAAE,mBAAmB;EAC7BC,QAAQ,EAAE;;;;;;;;;;;;;;;;;;;CAmBX,CAAC,E,sCACWlB,YAAY,CAyBxB;SAzBYA,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}